program -> statements

statements
  -> _ statement _ {% 
      data => [data[0]]
  %}
  | _ statement _ "\n" statements {%
      data => [data[0], ...data[4]]
  %}

statement
  -> var_assignment {% id %}
  | print_statement {% id %}
  | while_loop {% id %}
  | expression {% id %}

while_loop -> "while" __ binary_expression _ ":" _ "\n" statements {% 
    data => {
      return {
        type: "while_loop",
        condition: data[2],
        body: data[8]
      }
    }
  %}

print_statement -> "log" __ expression {% 
    data => {
      return {
        type: "print_statement",
        expression: data[2]
      }
    }
  %}

expression
  -> unary_expression {% id %}
  | binary_expression {% id %}

unary_expression
  -> number {% id %}
  | identifier {% id %}

binary_expression
  -> unary_expression _ operator _ expression {%
    data => {
      return {
        type: "binary_expression",
        left: data[0],
        operator: data[2],
        right: data[4]
      }
    }
  %}

operator 
  -> "+"  {% id %}
  | "-"  {% id %}
  | "*"  {% id %}
  | "/"  {% id %}
  | "%"  {% id %}
  | "**" {% id %}
  | "==" {% id %}
  | "!=" {% id %}
  | "<" {% id %}
  | ">" {% id %}
  | "<=" {% id %}
  | ">=" {% id %}

var_assignment -> var_type __ identifier _ "=" _ expression {%
    data => {
      return {
        type: "var_assignment",
        var_type: data[0],
        varname: data[2],
        value: data[6]
      }
    }
  %}

var_type 
  -> "int"  {% id %}
  | "float"  {% id %}
  | "string"  {% id %}

identifier -> [a-z]:+ {% id %}

number
  -> integer {% id %}
  | float {% id %}

float -> integer "." integer {%
      data => Number(data[0] + "." + data[2]) 
  %}

integer -> digits {% 
    data => Number(data[0])
 %}

digits -> [0-9]:+ {%
      data => data[0].join("")
  %}

_ -> [ ]:*

__ -> [ ]:+