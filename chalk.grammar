input
  -> object {% id %}
  | binary_expression {% id %}
  | statements

statements
  -> _ statement _ {% 
      data => [data[0]]
  %}
  | _ statement _ "\n" statements {%
      data => [data[0], ...data[4]]
  %}

statement
  -> var_assignment {% id %}

var_assignment -> var_type __ var_identifier _ "=" _ object {%
    data => {
      return {
        type: "var_assignment",
        var_type: data[0],
        varname: data[2],
        value: data[6]
      }
    }
  %}

var_type 
  -> "int"  {% id %}
  | "float"  {% id %}
  | "string"  {% id %}
  | "array" {% id %}
  | "dict" {% id %}

var_identifier -> [A-z]:+ {% id %}

binary_expression
  -> additive
  | multiplicative

additive
  -> multiplicative {% id %}
  | multiplicative _ [+-] _ additive {% 
      data => {
        switch (data[2]) {
          case "+":
            return data[0] + data[4];
          case "-":
            return data[0] - data[4];
        }
      } 
    %}

multiplicative
  -> unary_expression {% id %}
  | unary_expression _ [*/%] _ multiplicative {% 
      data => {
        switch (data[2]) {
          case "*":
            return data[0] * data[4];
          case "/":
            return data[0] / data[4];
          case "%":
            return data[0] % data[4];
          case "^":
            return data[0] ** data[4];
        }
      } 
    %}

unary_expression
  -> number {% id %}
  | "(" _ additive _ ")" {% data => data[2] %}

assignment_operator 
  -> "+" {% id %}
  | "-" {% id %}
  | "*" {% id %}
  | "/" {% id %}
  | "^" {% id %}
  | "%" {% id %}

comparison_operator
  -> "==" {% id %}
  | "!=" {% id %}
  | "<" {% id %}
  | ">" {% id %}
  | "<=" {% id %}
  | ">=" {% id %}

object
  -> simple_object {% id %}
  | array {% id %}

array 
  -> "[" _ "]" {% () => [] %}
  | "[" _ array_items _ "]" {% data => "[" + data[2] + "]" %}

array_items
  -> simple_object {% id %}
  | simple_object "," _ array_items {% data => [data[0] + "," + " " + data[3]] %}

simple_object
  -> number {% id %}
  | boolean {% id %}
  | myNull {% id %}
  | string {% id %}

string -> "\"" character:+ "\""  {% data => "\"" + data[1].join("") + "\"" %}

character 
  -> [^\"\\] {% id %}
  | "\\" escape {% data => data[1] %}

escape
  -> "\"" {% () => '"' %}
  | "\\" {% () => "\\" %}
  | "/" {% () => "/" %}
  | "b" {% () => "\b" %}
  | "f" {% () => "\f" %}
  | "n" {% () => "\n" %}
  | "r" {% () => "\r" %}
  | "t" {% () => "\t" %}
  | "u" hex hex hex hex {%
      data => {
        const code = parseInt(data.splice(1).join(""), 16);
        return String.fromCharCode(code);
      }
    %}

hex
  -> digit {% data => Number(data[0]) %}
  | [a-fA-F] {%
      data => {
        switch (data[0].toLowerCase()) {
          case "a":
            return 10;
          case "b":
            return 11;
          case "c":
            return 12;
          case "d":
            return 13;
          case "e":
            return 14;
          case "f":
            return 15;
        }
      }
    %}

myNull -> "null"

boolean
  -> "true" {% () => true %}
  | "false" {% () => false %}

number
  -> integer {% id %}
  | float {% id %}

float -> integer "." integer {% data => data[0] + "." + data[2] %}

integer -> digit:+ {% data => Number(data[0].join("")) %}

digit -> [0-9] {% id %}

_ -> [ ]:*

__ -> [ ]:+